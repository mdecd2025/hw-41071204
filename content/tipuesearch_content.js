var tipuesearch = {"pages": [{'title': 'About', 'text': '課程名稱: 協同產品設計實習 - Collaborative Product Design Practice \n 學員作業網站:  https://mdecd2025.github.io/hw-41071204/content/index.html \n 學員作業倉儲:  https://github.com/mdecd2025/hw-41071204 \n \n 課程代號: cd2025 \n Teams 線上教學: \n 以 "學號@nfu.edu.tw" 登入 \xa0 https://login.microsoftonline.com/ \xa0 Office 365 \n Teams 團隊代碼:\xa0 p5z4eku \n \n 課程評分: \n Homework (30%) - 每週至少提交兩次與課程進度有關的內容, 完成後填回自評表單 \n Exam (40%) - 建立包含操作流程影片、心得以及提供檔案下載的網頁後填回自評表單 \n Final Report (30%) - 利用網頁內容進行簡報並提交 pdf 格式書面報告, 完成後填回自評表單 \n', 'tags': '', 'url': 'About.html'}, {'title': 'Tasks', 'text': '', 'tags': '', 'url': 'Tasks.html'}, {'title': 'Wink', 'text': '\n \n \n', 'tags': '', 'url': 'Wink.html'}, {'title': 'task1', 'text': '\n \n', 'tags': '', 'url': 'task1.html'}, {'title': 'list', 'text': '2b: \n \n \n 學員網站連結  |  學員倉儲連結 \n 2b: \n g8 網站  |  g8 倉儲 \n # 從  Brython 程式庫中的 browser 導入 html, 可用來輸出超文件內容\n# 而所導入的 document 可以指向網頁中的特定 id 內容\nfrom browser import html, document\n# 建立 url 變數與網站中 2b 學員的學號與帳號資料 URL 網誌字串對應\nurl = "https://mde.tw/list/2b.txt"\n# 利用 open() 物件中的 readlines() 方法, 取出網站中的資料並逐行放入數列中, 因此 data 的資料型別為數列\ndata = open(url).readlines()\n# 進行資料查驗時, 印出 data 數列內容\n#print(data)\n# 因為學員資料中的第一列為標題, 因此有效資料從索引值 1 開始\nall_stud = data[1:]\n# 利用 len() 函式查驗 all_stud 數列有幾筆資料, 因為要與前後的字串併接, 因此利用 str() 將整數轉為字串\nprint("總共有 " + str(len(all_stud)) + "名學員")\n# 利用 document[] 取得 id 為 "brython_div1" 的位置, 然後與 brython_div1 變數對應\nbrython_div1 = document["brython_div1"]\n# 利用 Brython 的 "<=" 特殊符號, 將右值帶有字串與超文件內容物件插入 brython_div1 變數所指定的位置\n# 其中利用 html.A 建立 anchor 標註物件, 第一個變數為 anchor 字串, 第二個變數則為 hyper text reference\nbrython_div1 <= "1. " + html.A("2b-g8", href="https://mdecd2025.github.io/2b-g8/")+ html.A("(repo)", href="https://github.com/mdecd2025/2b-g8")\n# 利用 html.BR() 插入 break 標註\nbrython_div1 <= html.BR()\nbrython_div1 <= "2. " + html.A("41023215", href="https://mdecd2025.github.io/hw-41023215/")+ html.A("(repo)", href="https://github.com/mdecd2025/hw-41023215")\nbrython_div1 <= html.BR()\nbrython_div1 <= "3. " + html.A("41023216", href="https://mdecd2025.github.io/hw-41023216/")+ html.A("(repo)", href="https://github.com/mdecd2025/hw-41023216")\nbrython_div1 <= html.BR()\nbrython_div1 <= "4. " + html.A("41023213", href="https://mdecd2025.github.io/hw-41023213/")+ html.A("(repo)", href="https://github.com/mdecd2025/hw-41023213")\nbrython_div1 <= html.BR()\nbrython_div1 <= "5. " + html.A("41071203", href="https://mdecd2025.github.io/hw-41071203/")+ html.A("(repo)", href="https://github.com/mdecd2025/hw-41071203")\nbrython_div1 <= html.BR()\nbrython_div1 <= "6. " + html.A("41071204", href="https://mdecd2025.github.io/hw-41071204/")+ html.A("(repo)", href="https://github.com/mdecd2025/hw-41071204")\nbrython_div1 <= html.BR()\nbrython_div1 <= "7. " + html.A("41071202", href="https://mdecd2025.github.io/hw-41071202/")+ html.A("(repo)", href="https://github.com/mdecd2025/hw-41071202")\n \n \n \n \n \n', 'tags': '', 'url': 'list.html'}, {'title': 'ipv6', 'text': 'IPv6 設定: \n IPv6 分配: 2001:288:6004:17:fff1:cd25:0000:b014 gateway: 2001:288:6004:17::254 dns server: 2001:288:6004:17::3 2001:b000:168::1 \n 第一步 \n 控制台更改ipv6位置 \n 第二步 \n 開啟 init.py 更改 IP \n 第三步 \n C:\\>cd tmp \n C:\\tmp>cd 4 \n C:\\tmp\\4>cms \n 複製網址(9441) \n 第四步 \n tri+c結束工作後C:\\tmp\\4>start cmd \n 第五步 \n 更改網址(8000) \n \n', 'tags': '', 'url': 'ipv6.html'}, {'title': 'task2', 'text': '\n \n', 'tags': '', 'url': 'task2.html'}, {'title': 'w3', 'text': 'import urllib.request\n\n# 網址\nurl = "https://mde.tw/list/2a.txt"\n\n# 下載資料\nwith urllib.request.urlopen(url) as response:\n    # 直接讀取並按行分割，不需要使用 decode()\n    data = response.read().splitlines()  # 這樣讀取已經是字串了，不需解碼\n\n# 2a 學員的帳號資料\na_all_members = set([\'41223154\', \'41271125\', \'41271158\', \'41271146\', \'41271131\', \'CYG41223103\', \'41223102\', \'41023128\', \'41023137\', \'41223137\', \'41223157\', \'41223156\', \'otakuyoyo\', \'41223141\', \'41223113\', \'kim41223114\', \'joeisme1208\', \'41223116\', \'41223144\', \'41223140\', \'41223143\', \'41223138\', \'41223134\', \'41223136\', \'zhe41223118\', \'Spirit0224\', \'yuhao-08\', \'41223158\', \'Ren911308\', \'41223150\', \'Manto8\', \'CYA41223106\', \'yan21ed\', \'Lin41223107\', \'41223133\', \'hong41223129\', \'41223110\', \'41223147\', \'Linjiahong41223125\', \'CHN41223132\', \'Yu-Fang-Hong\', \'41023111\', \'yckaooooo\', \'kolas911205\', \'41023105\', \'40932134\', \'41223104\', \'yan41223101\', \'41223105\', \'41223153\', \'41223120\', \'41223152\', \'G8People\', \'WSE41223112\', \'41223146\', \'41223119\'])\n\n# 跳過第一行標題，並過濾出 GitHub 帳號不在 a_all_members 的學員\nnon_member_stud_nums = []\n\nfor line in data[1:]:  # 跳過標題行\n    stud_num, stud_github = line.split("\\t")  # 拆分學號與 GitHub 帳號\n    if stud_github not in a_all_members:\n        non_member_stud_nums.append(stud_num)\n\n# 顯示結果\nfor stud_num in non_member_stud_nums:\n    print(stud_num)\n \n 請列出各班目前尚未納入分組的學員名單(2a) \n import urllib.request\n\n# 設定 URL\nurl = "https://mde.tw/list/2b.txt"\n\n# 下載並讀取資料\nresponse = urllib.request.urlopen(url)\ndata = response.read().splitlines()  # 移除 decode，直接處理讀取的資料\n\n# 跳過標題行，從第二行開始處理\nall_stud = data[1:]\n\n# 固定的 GitHub 帳號清單\nb_all_members = [\n    \'41223251\', \'41223211\', \'41223245\', \'41223243\', \'jjjay41223212\', \'leeshaowei0716\',\n    \'41223234\', \'41223209\', \'41223205\', \'41223201\', \'41223202\', \'41223208-hw\', \'41223216\',\n    \'41223217\', \'41223248\', \'emma0312\', \'41223242\', \'41223203\', \'41223144\', \'41223235\',\n    \'RAY41223215\', \'hyy41223228\', \'41223227\', \'41223206\', \'41223226-0\', \'Cloud41223237\',\n    \'Yujenchuang\', \'41223225\', \'ljg41223220\', \'supowen\', \'jacky93111\', \'41223246\', \'Liu41223244\',\n    \'41223236\', \'41223219\', \'41271237\', \'41223249\', \'41223229\', \'41223224\', \'41223222\',\n    \'41223231\', \'linryan23\', \'41023114\', \'41223230\', \'timluo123\', \'CYC41223247\', \'41223218\',\n    \'ych0227\', \'41023215\', \'41023216\', \'41023213\', \'41071203\', \'41071204\', \'41071202\', \'c-ching\',\n    \'YUN4\', \'tseYU000\', \'snowfall-killer\', \'junpig10\'\n]\n\n# 逐行處理學員資料\nfor i in all_stud:\n    # 移除每行結尾的換行符號\n    drop_n = i.strip()\n\n    # 檢查該行是否為空行\n    if not drop_n:\n        continue\n\n    # 用制表符分割學號與 GitHub 帳號\n    stud = drop_n.split("\\t")\n\n    # 檢查該行是否包含足夠的欄位（至少2個欄位：學號與 GitHub 帳號）\n    if len(stud) < 2:\n        print(f"格式錯誤: {drop_n}")\n        continue\n\n    stud_num = stud[0]\n    stud_github = stud[1]\n\n    # 如果 GitHub 帳號不在 b_all_members 中，印出學號\n    if stud_github not in b_all_members:\n        print(stud_num)\n \n 請接著列出目前各班尚未納組的學員學號(2b) \n', 'tags': '', 'url': 'w3.html'}, {'title': 'task3', 'text': 'solvespace建立連桿 \n \n onshape and webot製作HW2過程 \n   \n \n 直接轉檔的操作步驟 \n', 'tags': '', 'url': 'task3.html'}, {'title': 'task4', 'text': '\n', 'tags': '', 'url': 'task4.html'}, {'title': 'W4', 'text': '', 'tags': '', 'url': 'W4.html'}, {'title': 'W5', 'text': '\n', 'tags': '', 'url': 'W5.html'}, {'title': 'W6', 'text': '', 'tags': '', 'url': 'W6.html'}, {'title': 'task5', 'text': '', 'tags': '', 'url': 'task5.html'}, {'title': 'W7', 'text': 'solvespace繪製籃球機影片 \n \n \n \n onshape檔 \n', 'tags': '', 'url': 'W7.html'}, {'title': 'task6', 'text': '', 'tags': '', 'url': 'task6.html'}, {'title': 'Homework', 'text': '作業 (30%) \n HW1 (5%):  建立由 Box 組成的平面四連桿機構 Webots 模擬場景 \n part1: \n 請各學員在 USB 隨身碟或個人電腦上完成 cd2025 課程所需的可攜系統配置: \n 下載  portable_wcm2025.7z  (330MB, 解開壓縮後 1.4GB) \n Webots_2025a.7z  (1.5 GB, 解開後約為 2.9GB, 可單獨運作) \n Webots_2025a_web.7z  (171 MB, 解開壓縮後約為 1GB, 必須連網運作) \n Blender4.2.7z \n part2: \n 請各學員完成可攜程式系統配置後, 利用 Webots R2025a 中寬度與高度都為 0.1m 的 box 物件建立一個簡單的平面四連桿機構模擬場景. \n base (基座) 長度 1m, link1 長度 0.4m, link2 長度 0.6m, link3 長度 0.9m, 各轉軸均為 HingeJoint, joint1 旋轉速度設定為 1radian/sec. \n part3: \n 模擬場景啟動後, 按下 s 鍵機構開始作動, 按下 p 鍵後機構暫停. \n 參考資料: \n cd2025_hw1_demo.7z \n HW2 (5%):  建立由 CAD 繪製零件組成的平面四連桿機構 Webots 模擬場景 \n 各學員請利用 CAD 系統依據 HW1 的連桿尺寸與運動方式, 配置適當大小的旋轉軸以及基座後, 利用 Webots R2025a 完成一個簡單的平面四連桿機構模擬場景. \n 參考資料: \n fourbar_slvs.7z \n HW3 (20%): 建立 Webots 桌上籃球遊戲機模擬系統 \n 請各分組利用CAD 系統建立一個能在電腦桌 (1600W X 700D X 740H mm) 上運作的投籃機構 ( 參考影片 )後, 導入 Webots R2025a 套件, 建立一個能由使用者透過鍵盤按鍵操作, 且具備計分板的籃球遊戲機模擬系統. \n 參考資料: \n 參考資料: \n fourbar_ball_throwing_linkage.slvs \n sixbar_ball_throwing_linkage.slvs \n \n', 'tags': '', 'url': 'Homework.html'}, {'title': 'HW1', 'text': 'HW1 (5%):  建立由 Box 組成的平面四連桿機構 Webots 模擬場景 \n 操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW1 - 41071204 \n hw1.7z \n', 'tags': '', 'url': 'HW1.html'}, {'title': 'HW2', 'text': 'HW2 (5%):  建立由 CAD 繪製零件組成的平面四連桿機構 Webots 模擬場景 \n 操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW2 - 學員學號 \n hw2.7z \n \n 操作過程 \n', 'tags': '', 'url': 'HW2.html'}, {'title': 'HW3', 'text': 'HW3 (20%): 建立 Webots 桌上籃球遊戲機模擬系統 \n 操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW3 - 41071204 \n \n 操作影片 \n hw3.7z \n', 'tags': '', 'url': 'HW3.html'}, {'title': 'Midterm', 'text': '本課程所繳交的期中成績為學員自評之學習期望成績. \n 期中考週的自評期望成績繳交流程: \n \n 整理先前所完成的各週的進度、作業網頁內容以及心得 \n 拍攝期中自評影片, 上傳至 Youtube 後, 以" 國立虎尾科技大學 - 機械設計工程系 - cd2025 期中自評- 學員學號 "為影片標題後嵌入本頁面中 \n 回填期中自評表單 \n 上傳學員期中成績 \n \n 各週進度: \n W1新增倉儲與作業連結 \n W2更改網頁名稱及標題 \n W3 製作全班網站及倉儲和各組網站及倉儲 \n W4使用solvespace繪製零件，熟悉solvespace並用ShareX錄製影片；製作可攜 \n W5製作可攜，並用ShareX錄製影片以及後期上字幕 \n W6運用webots做出四連趕方塊並且讓其作動；並用ShareX錄製影片 \n W7列出各班為那組之學員學號 使用SSH協定執行作業倉儲的推送 \n W8先在solvespace繪製零件後發現轉進webots無法作動後再使用Onshape轉進webots並做出四連趕方塊並且讓其作動。讓電腦ipv6固定，並且可用8000開啟。 \n W9修正brython_div1不見的問題 新增期中自評內容 在solvespace繪製籃球機的零件 \n 各週網頁內容: \n W1新增倉儲與作業連結 \n W2更改網頁名稱及標題 \n W3 list全班學生&班級小組網站與倉儲新增 \n W4增加Wink標籤 增加wink影片連結 影片上傳 \n W5影片上傳(有字幕版) \n W6新增標題 新增W5影片 新增HW1影片 新增標題 \n W7新增w3內容 修改w3 新增task2內容 \n W8新增HW2內容 新增task4 新增ipv6 新增task3內容 新增影片至task3 \n W9 編輯wink 修正brython_div1不見的問題 新增期中自評內容 \n 期中心得: \n 第一週還沒進入狀態時，感覺上課總是跟不上進度，加上第一次接觸github，所以更加不自信及手忙腳亂。前三週還要靠著同學及老師的幫忙才能一步一步的執行下去，所以進度慢了很多，第四週開始慢慢上手後，也在努力趕上教學進度，開始使用solvespace來繪製零件，一開始對這個軟體還不是很熟悉，慢慢摸索後發現跟之前使用的其他繪圖軟體相似也逐漸上手；webots這個軟體是從以前就沒有接觸過類似的，上網找教學影片即問老師後，才開始進入軌道；Onshape則是跟以前學過的繪圖軟體非常相似，所以上手非常容易。這堂課目前上下來我體會到人各有所長，同組裡像我就擅長繪圖，有人擅長打程式，有人很擅長解決問題，這可能就是除了上課內容之外，老師最希望我們體會以及學習到的知識吧。 \n 期中自評影片: \n \n', 'tags': '', 'url': 'Midterm.html'}, {'title': 'Exam', 'text': 'Exam1 (10%): 建立 Webots 基本物件模擬場景 \n 各學員利用 Webots R2025a 套件中的 Shape 物件, 隨堂建立指定的機電系統模擬場景, 並利用 Python 程式進行互動控制. \n Exam2 (10%): 利用 CAD 零組件建立模擬場景\xa0 \n 各學員利用 CAD (Solvespace 與 NX2312), 隨堂建立指定的系統模型零組件後, 導入 Webots R2025a 後, 建立機電系統模擬場景, 並利用 Python 程式進行互動控制. \n Exam3 (20%): Webots 機電模擬場景的協同設計 \n 各分組利用 CAD (Solvespace 與 NX2312), 隨堂建立指定的系統模型零組件後, 導入 Webots R2025a 後, 建立機電系統模擬場景, 並利用 Python 程式進行互動控制. 過程中各學員必須採同步協同模式, 維護從 Github Classroom 取得的分組協同倉儲以及網站. \n 協同分組方式: \n \n 分配學員負責利用 Solvespace 建立系統零組件, 過程中必須將所建構之零組件檔案與繪圖過程影片上傳至分組網頁. \n 分配學員負責利用 NX2312 建立系統零組件, 過程中必須將所建構之零組件檔案與繪圖過程影片上傳至分組網頁. \n 分配學員負責利用 Webots 建立機電系統模擬場景, 並利用 Python 程式進行控制, 過程中必須將建構過程拍成帶有說明字幕的影片上傳至分組網頁. \n \n', 'tags': '', 'url': 'Exam.html'}, {'title': 'Exam1', 'text': 'Exam1 (10%): 建立 Webots 基本物件模擬場景 \n 操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam1 - 41071204 \n exam1.7z \n \n \n 加入 robot \n 在 robot 底下的 children 建立兩個 HingeJoint(joint1 、 joint4) \n HingeJoint(joint1)-Solid-children-pose- children-Shape-geometry-Box(0.4 0.1 0.1) \n Shape- Appearance- Material- diffuseColir(1 0 0) \n translation (Solid) -0.5 0 0.4 rotation(Solid) 0 0 1 0.06981320000000071 \n translation (pose) 0.2 0 0 \n HingeJoint(joint1)- HingeJointParameters-axis(0 0 1)-anchor(-0.5 0 0)  \n HingeJoint(joint1)-device- RotationalMotor 完成 link1 \n HingeJoint(joint2)-Solid-children-pose- children-Shape-geometry-Box(0.6 0.1 0.1) \n HingeJoint(joint2)-Solid-children-pose- children-Shape-geometry-Box(0.3 0.1 0.1) \n Shape- Appearance- Material- diffuseColir(0 1 0) \n translation (Solid) 0.4 0 0.1 rotation(Solid) 0 0 1 1.57 \n translation (pose) 0.3 0 0 translation (pose) 0 0.15 0 rotation(pose) 0 0 1 1.57 \n HingeJoint(joint2)- HingeJointParameters-axis(0 0 1)-anchor(0.4 0 0)  完成 link2 \n HingeJoint(joint3)-Solid-children-pose- children-Shape-geometry-Box(0.9 0.1 0.1) \n Shape- Appearance- Material- diffuseColir(0 0 1) \n translation (Solid) 0.6 0 -0.1 rotation(Solid) 0 0 -1 2.4 \n translation (pose) 0.45 0 0 \n HingeJoint(joint3)- HingeJointParameters-axis(0 0 1)-anchor(0.6 0 0)  完成 link3 \n boundingObject-pose-use-link1(translation 0.2 0 0)-physics- physics \n boundingObject-pose-use-link2(translation 0.3 0 0)-physics- physics \n boundingObject-pose-use-link3(translation 0.45 0 0)-physics- physics \n HingeJoint(joint4)- SolidReference-link3 \n HingeJoint(joint4)- HingeJointParameters-axis(0 0 1)-anchor(0.5 0 0) \n Controller-fourbar_controller \n 心得 做 Exam1 時想說應該跟 HW1 很像，所以應該不難，但操作時發現有遇到一些難關，改位置時我常把 Solid 跟 pose 搞混，所以改完位置後會發現做動時會解體，改位置上可是花費了不少時間。 \n \n', 'tags': '', 'url': 'Exam1.html'}, {'title': 'Exam2', 'text': 'Exam2 (10%): 利用 CAD 零組件建立模擬場景 \n 操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam2 - 學員學號 \n exam2.7z \n \n \n 在 solvespace 裡畫好零件及架構圖 - 轉成 stl- 使用程式碼轉成 obj- 匯入 Blender \n 轉成 stl \n 使用程式碼轉成 obj \n 匯入 Blender 確認各零件名 \n 打開 webot 加入 robot \n robot- children 建立兩個 HingeJoint(joint1 、 joint4) 、 solid(base1 、 base2) \n solid(base1)- children- Shape-Mesh \n Shape- Appearance- Material- diffuseColir(1 0 0) 完成 base1 \n solid(base2)- children- Shape-Mesh \n Shape- Appearance- Material- diffuseColir(0 1 0) 完成 base2 \n HingeJoint(joint1)- Solid-children- Shape-Mesh \n Shape- Appearance- Material- diffuseColir(0 0 1) \n HingeJoint(joint1)- HingeJointParameters-axis(0 0 1)  \n HingeJoint(joint1)-device- RotationalMotor 完成 link1 \n HingeJoint(joint2)- Solid-children- Shape-Mesh \n Shape- Appearance- Material- diffuseColir(0 1 1) \n HingeJoint(joint2)- HingeJointParameters-axis(0 0 1) -anchor(1.0375 0.0725 0)  完成 link2 \n HingeJoint(joint3)- Solid-children- Shape-Mesh \n Shape- Appearance- Material- diffuseColir(1 1 0) \n HingeJoint(joint3)- HingeJointParameters-axis(0 0 1) -anchor(0.723 1.5392 0)  完成 link3 \n boundingObject-mesh- link1-physics- physics \n boundingObject- mesh - link2-physics- physics \n boundingObject- mesh - link3-physics- physics \n HingeJoint(joint4)- SolidReference-link3 \n HingeJoint(joint4)- HingeJointParameters-axis(0 0 1)-anchor(2 0 0) \n Controller-fourbar_controller \n \n 心得 做 Exam2 就沒有 Exam1 的問題了，因為 Exam2 是先在 solvespace 裡放置好各零件位置並直接轉過去，所以匯進 webot 時不需要去調每個零件的位置。但在一開始設計連桿時沒有注意到長度，所以做動時卡住了，調整後才能順利做動。', 'tags': '', 'url': 'Exam2.html'}, {'title': 'Exam3', 'text': 'Exam3 (20%): Webots 機電模擬場景的協同設計 \n 操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam3 -\xa041071204 \n Exam3-1 \n \n \n 在控制台設好自己的 IPv6 網址 \n 關掉 IPv4 網址 \n 以  webotsw --stream  啟動個人所完成的  HW1  模擬系統 \n 查看各自 webots 的端口 \n 在網頁上輸入 http:[ 自己的 IPv6 網址 ]: 查看各自 webots 的端口 /index.html \n 在 Connect to 內輸入 [ 自己的 IPv6 網址 ]:  查看各自 webots 的端口 \n 按下 Connect 即可看到自己 webots 的畫面 \n 按下 Disconnec \n 到 Connect to 內輸入 [ 組員的 IPv6 網址 ]:  組員 webots 的端口 \n \n 心得 剛開始操作 Exam3-1 時，摸不著頭緒，不知道該從哪裡下手，跟組員一起討論後有種茅塞頓開的感覺，原來是我把它想得太複雜了，理解如何操作後瞬間信心大漲，但後來要讓其他組員連我的時發現怎麼連都無法連上，才發現 webots 版本不一樣無法連到，趕快把自己的版本改成跟其他人一樣才順利連上。知道怎麼操作後和組員一起各種摸索及實驗後，才發現組員在 webots 上操作，我在網頁上都能看到並且我也能中斷，由此我也才認真了解何謂叫協同 \n Exam3-2 \n \n \n 在控制台設好自己的 IPv6 網址 \n 關掉 IPv4 網址 \n 下載 7z  \n 以  webotsw --stream  開啟 \n 查看各自 webots 的端口 \n 在程式碼處修改成各自的學號 \n 在網頁上輸入 http:[ 自己的 IPv6 網址 ]: 查看各自 webots 的端口 /index.html \n 在 Connect to 內輸入 [ 自己的 IPv6 網址 ]:  查看各自 webots 的端口 \n 按下 Connect 即可看到自己 webots 的畫面 \n 按下 Disconnec \n 到 Connect to 內輸入 [ 組員的 IPv6 網址 ]:  組員 webots 的端口 \n \n 心得  Exam3-2 跟 Exam3-1 差不多，所以操作上沒有太大的問題，修改七段顯示器的數字也沒有我想的複雜，跟 3-3 相比下 3-2 比較好完成。 \n Exam3-2 \n \n \n 在控制台設好自己的 IPv6 網址 \n 關掉 IPv4 網址 \n 輸入 pip 確認安裝正確的 python \n 先執行 set WEBOTS_HOME=y:\\Webots_2025a 指令 再執行 webots –stream \n 先執行指令 pip install websocket-client websocket-server keyboard \n 執行 python youbot_cart_client.py \n 查看各自 webots 的端口 \n 在程式碼處修改成各自的學號 \n 在網頁上輸入 http:[ 自己的 IPv6 網址 ]: 查看各自 webots 的端口 /index.html \n 在 Connect to 內輸入 [ 組長的 IPv6 網址 ]:  組長 webots 的端口 \n 按下 Connect 即可看到組長 webots 的畫面 \n 按下上下左右建即可操控 \n \n 心得  Exam3-3 我們想很久，組員間也研究很久，後來問了有上過類似的客的學長後，才學會要如何完成這項作業。', 'tags': '', 'url': 'Exam3.html'}, {'title': 'Final', 'text': '期末協同專案執行過程影片、簡報與 PDf 報告檔案 (六人一組) (30%) \n 題目:  Webots 動態投籃模擬系統的協同設計 \n 說明:  \n 籃框架被配置在一定範圍內, 可隨機慢速前進、後退及左右擺動, 投籃機構系統帶有一定數量的籃球, 被配置在可自由移動的輪車上. \n 操作者可利用鍵盤特定按鍵控制投籃輪車的移動並發射投籃, 每投出一球後系統透過記分板進行計分, 並由送球機構進行補球或移動輪車取球, 遊戲可進行至全部數量籃球投完為止. \n 請將期末協同專案執行過程、內容與心得, 製作成影片，配合字幕上傳至 Youtube 後嵌入各階段的期末報告頁面中. \n 影片標題:  國立虎尾科技大學 - 機械設計工程系 - cd2025 期末報告 - 學員學號 - 各階段影片主題 \n', 'tags': '', 'url': 'Final.html'}, {'title': 'Brython', 'text': '1 add to 100 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};